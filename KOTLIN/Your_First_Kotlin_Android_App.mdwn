# Your First Kotlin Android App
[LECTURE](https://www.raywenderlich.com/4936497-your-first-kotlin-android-app/lessons/7)
> 해당 문서는 전체적인 과정의 설명이 아니라 본인이 **헷갈렸던 부분**이나 **새로 알았던 부분**, **다시 보기 위한 부분**을 위주로 작성되었음을 알립니다.

> 해당 문서는 한글과 영문을 혼합하여 작성되었습니다. 

# TODO List
1. "TAP ME" button 추가
2. "GAME SCORE" 텍스트 추가
3. 남은 시간을 위한 텍스트 추가
4. 버튼을 탭하면 타이머가 countdown 시작
5. 버튼을 탭하면 SCORE 증가
6. 타이머가 0이 되면 SCORE를 보이고 게임을 리셋
7. 핸드폰이 LANDSCAPE 모드일 경우, 게임을 회전시킨다
8. GOOGLE PLAY STORE에 등록한다

# 필기
- HardCodedText : XML에서 String을 따로 빼는 것
    - 여러 언어로의 변환을 편리하게 할 수 있는 장점 또한 있다
    - ⌥ + ⇧ + ⏎ 를 이용해 안스에서 한번에 string을 추가해 준다

- Activity
    - package : 
        - group of related code
        - way 2 identify codes
        - useful in avoiding conflicts (keep them unique)
    - import : allows you to reuse codes
    - ` class MainActivity : AppCompatActivity () {...}` : MainActivity which extends AppCompatActivity
    - `onCreate(...){}...}` : method which is initial point of entry for Activity
    -  `super.onCreate(...)` : which calls another (parent) onCreate method
    - `setContentView(..)` : location of your activitys' resource 
    - 이것 말고도 default methods 들이 존재 
        - destroy, reload 등
- Manifest.xml
    - Names the package manager with unique identifier
    - Describes Activity Components
    - Names the classes and publishes their capabilities
    - Declares permissions
    - Sets minimum API
    - Lists libraries which is required in your application
- String format
    - `<string name="yourScore">Your Score : %1$d</string>` 그리고 `val newScore = getString(R.string.yourScore, score)` 형식의 String을 이용해서 format에 따라 보이게 할 수 있다

- 디버깅
    - 예를 들어서, 핸드폰을 landscaping 모드로 전환하면 게임이 리셋되게 된다. 이런 부분을 수정해야할 필요성이 있음
    - 많은 파일들이 있어서 Log가 헷갈릴 수 있으므로, 아래와 같이 로그를 단다.
    ```java
        companion object {
            private val Tag = MainActivity::class.java.simpleName
        }
        
        Log.d(TAG, "...") //onCreate에 들어가 있음 
        //따라서, Landscape 랑 일반 왔다갔다 할때마다 로그가 찍히는 것을 확인
    ```
    - 여러번 Created 되고 Destroyed된다면 앱은 어디에 property들을 저장하고 있는 것인가
        - 액티비티가 Stop되면 onSaveInstanceState가 작동된다. (identifier(key 값)를 기준으로 저장한다. 따라서 여기에 store할 것들을 지정해 준다.)
    - 중단점을 두어서, Debug를 해보자 -> 해당 지점에서 멈출테니 로그 분석
        - Pause 된 부분은 Grey 처리 됨 (따라서 이후 어디를 안갔는지, 어디서 멈추었는지 알 수 있음 -> 동그라미 두개 되어있는거 누르면 중단점 처리 후에 대해 자세히 볼 수 있음 (중단점이 많을 경우 유용하게 쓸 수 있다))
        - 버튼 설명 : 첫번째 버튼(Execution Point/중단점을 보여줌), 두번째 버튼(다음 코드 라인으로 이동시켜줌), 세번째 버튼 (메서드 안을 보여줌 -> 특정 클래스 인스턴스에서 누르면 해당 클래스 파일로 이동시켜줌), 네번째 버튼 (메서드 안을 볼 수 없을 때 강제로 볼 수 있게 한다), 다섯번째 버튼 (메소드가 불린 곳으로 이동시켜줌 / 메소드를 부른 곳으로 -> 디버그 패널에서도 볼 수 있음)
    - 디버그 패널에서 변수들의 지금 현재 값들을 볼 수 있음

<img src="https://user-images.githubusercontent.com/38804451/77032444-b7c93480-69e7-11ea-92d2-c8a0f958101f.png"/>
<img src = "https://user-images.githubusercontent.com/38804451/77033114-b13bbc80-69e9-11ea-9e5e-0bc0c88ebe3d.png"/>

> const를 이용해서 public static final필드로 컴파일 하게 만들 수 있다.
> 자바 처럼 static 으로 선언되는 변수들을 사용하고 싶다면, companion object 하에 넣어서 만들면 된다. (이렇게 하지 않으면 변수들을 A.PIE 이런식으로 접근해야한다.)
    
- State Restore
    - 어떻게 불러오는 것인가? -> onCreate에서 saveInstanceState를 파라미터로 받는다.
    

# 느낀점
- 맥북에서 run한 앱은 아이콘도 다르고, 앱 테마도 다르다 (신기....)
- 안드를 처음 해보는 대상을 기준으로 하기 때문에 그냥 계속 넘기면서 빨리 수강했다
    - 주로 ui를 이용한 코딩이 많아서 번거로웠다
- 기존에 코틀린을 했던 부분이 있어서 빠르게 수강할 수 있었다



